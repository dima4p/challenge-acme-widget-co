# == Schema Information
#
# Table name: special_offers
#
#  id            :integer          not null, primary key
#  activated_on  :integer
#  active        :boolean          default(FALSE), not null
#  discount      :decimal(5, 4)
#  next_affected :integer
#  product_code  :string           not null
#  created_at    :datetime         not null
#  updated_at    :datetime         not null
#
# Indexes
#
#  index_special_offers_on_product_code  (product_code)
#
# Foreign Keys
#
#  product_code  (product_code => products.code)
#
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

describe "/special_offers", type: :request do

  # This should return the minimal set of attributes required to create a valid
  # SpecialOffer. As you add validations to SpecialOffer, be sure to
  # adjust the attributes here as well. The list could not be empty.
  let(:special_offer) {create :special_offer}

  let(:valid_attributes) do
    attributes_for(:special_offer)
      .slice(*%i[product_code activated_on discount next_affected])
      .merge(
        product_code: create(:product).code,
      )
  end

  let(:invalid_attributes) do
    {product_code: ''}
  end

  describe "GET /index" do
    subject(:get_index) {get special_offers_url}

    it "renders a successful response" do
      SpecialOffer.create! valid_attributes
      get_index
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    subject(:get_show) {get special_offer_url(id: special_offer.to_param)}

    it "renders a successful response" do
      get_show
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    subject(:get_new) {get new_special_offer_url}

    it "renders a successful response" do
      get_new
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    subject(:get_edit) {get edit_special_offer_url(id: special_offer.to_param)}

    it "render a successful response" do
      get_edit
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    subject(:post_create) do
      post special_offers_url, params: { special_offer: attributes }
    end

    context "with valid parameters" do
      let(:attributes) {valid_attributes}

      it "creates a new SpecialOffer" do
        expect{post_create}.to change(SpecialOffer, :count).by(1)
      end

      it "redirects to the created special_offer" do
        post_create
        expect(response).to redirect_to special_offer_url SpecialOffer.last.to_param
      end
    end

    context "with invalid parameters" do
      let(:attributes) {invalid_attributes}

      it "does not create a new SpecialOffer" do
        expect {post_create}.not_to change(SpecialOffer, :count)
      end

      it "returns an unprocessable_entity response" do
        post_create
        expect(response).to have_http_status :unprocessable_entity
      end
    end
  end

  describe "PATCH /update" do
    subject(:patch_update) do
      patch special_offer_url(id: special_offer.to_param), params: { special_offer: attributes }
    end

    context "with valid parameters" do
      let(:attributes) { {product_code: new_code} }
      let(:new_code) {create(:product).code}

      it "updates the requested special_offer" do
        patch_update
        special_offer.reload
        expect(special_offer.product_code).to eq new_code
      end

      it "redirects to the special_offer" do
        patch_update
        special_offer.reload
        expect(response).to redirect_to(special_offer_url(id: special_offer.to_param))
      end
    end

    context "with invalid parameters" do
      let(:attributes) {invalid_attributes}

      it "returns an unprocessable_entity response" do
        patch_update
        expect(response).to have_http_status :unprocessable_entity
      end
    end
  end

  describe "DELETE /destroy" do
    subject(:delete_destroy) {delete special_offer_url(id: special_offer.to_param)}

    it "destroys the requested special_offer" do
      special_offer
      expect {delete_destroy}.to change(SpecialOffer, :count).by(-1)
    end

    it "redirects to the special_offers list" do
      special_offer
      delete_destroy
      expect(response).to redirect_to(special_offers_url)
    end
  end
end
