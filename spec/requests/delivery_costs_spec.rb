# == Schema Information
#
# Table name: delivery_costs
#
#  id         :integer          not null, primary key
#  price      :decimal(18, 2)
#  threshold  :decimal(18, 2)
#  created_at :datetime         not null
#  updated_at :datetime         not null
#
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

describe "/delivery_costs", type: :request do

  # This should return the minimal set of attributes required to create a valid
  # DeliveryCost. As you add validations to DeliveryCost, be sure to
  # adjust the attributes here as well. The list could not be empty.
  let(:delivery_cost) {create :delivery_cost}

  let(:valid_attributes) {attributes_for(:delivery_cost).slice *%i[threshold price]}

  let(:invalid_attributes) do
    {threshold: ''}
  end

  describe "GET /index" do
    subject(:get_index) {get delivery_costs_url}

    it "renders a successful response" do
      DeliveryCost.create! valid_attributes
      get_index
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    subject(:get_show) {get delivery_cost_url(id: delivery_cost.to_param)}

    it "renders a successful response" do
      get_show
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    subject(:get_new) {get new_delivery_cost_url}

    it "renders a successful response" do
      get_new
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    subject(:get_edit) {get edit_delivery_cost_url(id: delivery_cost.to_param)}

    it "render a successful response" do
      get_edit
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    subject(:post_create) do
      post delivery_costs_url, params: { delivery_cost: attributes }
    end

    context "with valid parameters" do
      let(:attributes) {valid_attributes}

      it "creates a new DeliveryCost" do
        expect{post_create}.to change(DeliveryCost, :count).by(1)
      end

      it "redirects to the created delivery_cost" do
        post_create
        expect(response).to redirect_to delivery_cost_url DeliveryCost.last.to_param
      end
    end

    context "with invalid parameters" do
      let(:attributes) {invalid_attributes}

      it "does not create a new DeliveryCost" do
        expect {post_create}.not_to change(DeliveryCost, :count)
      end

      it "returns an unprocessable_entity response" do
        post_create
        expect(response).to have_http_status :unprocessable_entity
      end
    end
  end

  describe "PATCH /update" do
    subject(:patch_update) do
      patch delivery_cost_url(id: delivery_cost.to_param), params: { delivery_cost: attributes }
    end

    context "with valid parameters" do
      let(:attributes) { {threshold: 50} }

      it "updates the requested delivery_cost" do
        patch_update
        delivery_cost.reload
        expect(delivery_cost.threshold).to eq 50
      end

      it "redirects to the delivery_cost" do
        patch_update
        delivery_cost.reload
        expect(response).to redirect_to(delivery_cost_url(id: delivery_cost.to_param))
      end
    end

    context "with invalid parameters" do
      let(:attributes) {invalid_attributes}

      it "returns an unprocessable_entity response" do
        patch_update
        expect(response).to have_http_status :unprocessable_entity
      end
    end
  end

  describe "DELETE /destroy" do
    subject(:delete_destroy) {delete delivery_cost_url(id: delivery_cost.to_param)}

    it "destroys the requested delivery_cost" do
      delivery_cost
      expect {delete_destroy}.to change(DeliveryCost, :count).by(-1)
    end

    it "redirects to the delivery_costs list" do
      delivery_cost
      delete_destroy
      expect(response).to redirect_to(delivery_costs_url)
    end
  end
end
